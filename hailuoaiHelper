// ==UserScript==
// @name         HailuoAI Tab Status
// @namespace    HailuoAI
// @version      1.0
// @description  Gives you notifications for almost-finished videos and sets links so those that get quickly removed have the link lingering (with autoplay to cache in in the browser), will also clean up videos that are never served up because the server rejects them
// @author       DUVish
// @match        https://hailuoai.video/
// @icon         https://www.google.com/s2/favicons?sz=64&domain=hailuoai.video
// @grant        none
// ==/UserScript==

const linkStyleEl = document.createElement("style");
const linkStyle = `
.linkElClass {
  color: cornflowerblue;
  position: absolute;
  top: 45px;
  left: 0px;
  height: 14px;
  width: 26px;
  font-size: 9px;
  background-color: black;
  text-align: center;
  opacity: 0.35;
  z-index: 1000000;
}

.linkElClass:hover {
  opacity: 1.0;
}

.automatic-btn-container {
  color: white;
  padding-right: 20px;
}

.automatic-btn-script {
  background-color: white;
  padding: 5px;
  color: black;
  border-radius: 9px;
  cursor: pointer;
}

.automatic-btn-script:hover {
  background-color: #d0cfcf;
}

.automatic-btn-script:active {
  background-color: #a6a6a6;
}
`;
linkStyleEl.textContent = linkStyle;
document.head.appendChild(linkStyleEl);

let CREATE_BTN_BOOLEAN = true;

const maxQueueSize = 5;
const queueIsFullMatch = `${maxQueueSize}${maxQueueSize}`;

const interval = 5 * 1000;

const shouldBeDeletedStr = "The video generation failed as it does not comply with community policies.";

const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));

const setTitleFunc = () => {
    const allLoadingVideos = Array.from(document.querySelectorAll(".ant-progress-text"));
    const highestPercentage = "";
    const allNumbers = allLoadingVideos.map((loading) => {
      const loadingText = loading?.innerText?.match(/(\d+)./)?.[1];
      const loadingTextNum = Number(loadingText);
      return loadingTextNum;
    });
    const highestNumber = allNumbers.sort((a, b) => b - a)[0];
    if (!isNaN(highestNumber)) {
      document.title = "-" + highestNumber + "-";
      if (highestNumber >= 90) createNotification();
    } else {
      document.title = "Empty";
    }
};

const setLinkFunc = () => {
  const videoCards = Array.from(document.querySelectorAll(".video-cards"));
  videoCards.forEach(video => {
    if (determineCardShouldBeDeleted(video)) {
      deleteVideoCard(video);
    } else if (video.dataset.linkSet) {
      return;
    } else {
      const videoEl = video.querySelector("video");
      if (!videoEl) return;

      videoEl.play();
      setTimeout(() => {videoEl.pause()}, 2000);
      const videoElLink = videoEl.src;
      const positionedEl = video.querySelector(".aspect-video-padding");
      const linkEl = document.createElement("span");
      const anchorEl = document.createElement("a");
      anchorEl.innerText = "[Link]";
      linkEl.classList.add("linkElClass");
      anchorEl.href = videoElLink;
      linkEl.appendChild(anchorEl);
      positionedEl.appendChild(linkEl);
      linkEl.addEventListener("click", (e) => {
        e.preventDefault();
        window.open(videoElLink, "_blank");
      });
      video.dataset.linkSet = "true";
    }
  });
}

const determineCardShouldBeDeleted = (videoEl) => {
  return videoEl.innerText.split("\n")[0] === shouldBeDeletedStr;
}

const deleteVideoCard = (videoEl) => {
  const deleteButton = videoEl.getElementsByClassName("absolute top-3 right-[10px] z-[15] cursor-pointer")?.[0];
  if (deleteButton) {
    deleteButton.click();
    sleep(2000);
    const confirmButton = document.getElementsByClassName("ant-btn css-o72qen ant-btn-primary")?.[0];
    confirmButton?.click();
    sleep(2000);
  }
}

const clickGenerateFunc = () => {
  const createBtn = document.querySelector(".create-btn-container");
  if (CREATE_BTN_BOOLEAN && createBtn && !determineIfQueueIsFull()) {
    createBtn.click();
  }
}

const determineIfQueueIsFull = () => {
  const queueText = document.querySelector(".bg-clip-text")?.textContent;
  return queueText === queueIsFullMatch;
}

const runAllForInterval = () => {
  setTitleFunc();
  setLinkFunc();
  clickGenerateFunc();
}

setInterval(runAllForInterval, interval);

function askNotificationPermission() {
  // Check if the browser supports notifications
  if (!("Notification" in window)) {
    console.log("This browser does not support notifications.");
    return;
  }
  Notification.requestPermission().then((permission) => {
  });
}

const createNotification = () => {
  const img = "https://registry.npmmirror.com/@lobehub/icons-static-png/1.5.0/files/dark/hailuo-color.png";
  const text = `HailuoAI task past 90%.`;
  const notification = new Notification("HailuoAI video cooked up", { body: text, icon: img });
}

document.addEventListener('click', askNotificationPermission);
setTimeout(() => {document.removeEventListener('click', askNotificationPermission)}, interval * 5);

const createAutomaticButtonSwitch = () => {
  let containerSpan = document.createElement("span");
  containerSpan.classList.add("automatic-btn-container");
  let textSpan = document.createElement("span");
  let buttonSpan = document.createElement("span");
  buttonSpan.classList.add("automatic-btn-script");
  textSpan.innerText = "GENERATE AUTOMATICALLY - ";
  buttonSpan.innerText = CREATE_BTN_BOOLEAN ? "TRUE" : "FALSE";
  buttonSpan.addEventListener("click", (e) => {
    let button = document.querySelector("automatic-btn-script");
    CREATE_BTN_BOOLEAN = !CREATE_BTN_BOOLEAN;
    buttonSpan.innerText = CREATE_BTN_BOOLEAN ? "TRUE" : "FALSE";
  });
  containerSpan.appendChild(textSpan);
  containerSpan.appendChild(buttonSpan);
  document.querySelector(".nav-right").prepend(containerSpan);
}

setTimeout(createAutomaticButtonSwitch, interval);






